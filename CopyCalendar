import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  ActivityIndicator,
  TextInput,
  TouchableOpacity,
  Modal,
  FlatList,
} from 'react-native';
import { Calendar } from 'react-native-calendars';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { Swipeable } from 'react-native-gesture-handler';
import axios from 'axios';
import moment from 'moment';
import Papa from 'papaparse';

const AppointmentCalendar = () => {
  const [appointments, setAppointments] = useState([]);
  const [markedDates, setMarkedDates] = useState({});
  const [selectedDate, setSelectedDate] = useState(moment().format('YYYY-MM-DD'));
  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [modalVisible, setModalVisible] = useState(false);
  const [formData, setFormData] = useState({
    nom: '',
    prenom: '',
    adresse: '',
    telephone: '',
    HeureInstallation: '',
  });

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const response = await axios.get(
          'https://www.greenconnectfrance.com/api/greenco'
        );
        const parsedData = parseCSV(response.data);
        setAppointments(parsedData);
        mapAppointmentsToCalendar(parsedData);
      } catch (error) {
        Alert.alert('Erreur', "Impossible de charger les données. Vérifiez votre connexion.");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  const parseCSV = (csv) => {
    const parsedData = Papa.parse(csv, { header: true }).data;
    return parsedData.map((item, index) => ({
      id: index.toString(),
      nom: item['Nom'] || 'Inconnu',
      prenom: item['Prenom'] || 'Inconnu',
      adresse: item['Adresse'] || 'Non spécifié',
      telephone: item['telephone'] || 'N/A',
      dateInstallation: moment(item.dateInstallation, 'DD/MM/YYYY').format('YYYY-MM-DD'),
      HeureInstallation: item['HeureInstallation'] || '00:00',
    }));
  };

  const mapAppointmentsToCalendar = (data) => {
    const marked = {};
    data.forEach((appointment) => {
      if (!marked[appointment.dateInstallation]) {
        marked[appointment.dateInstallation] = { marked: true, dotColor: '#6ddb6d' };
      }
    });
    setMarkedDates(marked);
  };

  const handleSaveAppointment = () => {
    if (!formData.nom || !formData.prenom || !formData.dateInstallation || !formData.HeureInstallation) {
      Alert.alert('Erreur', 'Tous les champs sont obligatoires.');
      return;
    }

    setAppointments((prev) => [
      ...prev,
      { ...formData, id: Date.now().toString(), dateInstallation: selectedDate },
    ]);

    setModalVisible(false);
    setFormData({
      nom: '',
      prenom: '',
      adresse: '',
      telephone: '',
      HeureInstallation: '',
    });
    mapAppointmentsToCalendar(appointments);
  };

  const handleDeleteAppointment = (id) => {
    Alert.alert('Confirmation', 'Voulez-vous supprimer ce rendez-vous ?', [
      { text: 'Annuler', style: 'cancel' },
      {
        text: 'Supprimer',
        onPress: () => setAppointments((prev) => prev.filter((appt) => appt.id !== id)),
      },
    ]);
  };

  const renderAppointment = ({ item }) => {
    const isSelected = item.id === selectedAppointmentId;

    const renderRightActions = () => (
      <View style={styles.swipeActions}>
        <TouchableOpacity onPress={() => handleDeleteAppointment(item.id)} style={styles.actionButton}>
          <Icon name="delete" size={24} color="#fff" />
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => {
            setFormData(item);
            setModalVisible(true);
          }}
          style={styles.actionButton}
        >
          <Icon name="edit" size={24} color="#fff" />
        </TouchableOpacity>
      </View>
    );

    return (
      <Swipeable renderRightActions={renderRightActions}>
        <TouchableOpacity
          style={[
            styles.appointmentCard,
            isSelected && styles.selectedCard,
          ]}
          onPress={() => setSelectedAppointmentId(item.id)}
        >
          <Text style={styles.appointmentText}>{item.nom} {item.prenom}</Text>
          <Text style={styles.appointmentText}>{item.adresse}</Text>
          <Text style={styles.appointmentText}>{item.Codepostal}</Text>
          <Text style={styles.appointmentText}>Heure : {item.HeureInstallation}</Text>
        </TouchableOpacity>
      </Swipeable>
    );
  };

  return (
    <View style={styles.container}>
      {isLoading ? (
        <ActivityIndicator size="large" color="#6ddb6d" />
      ) : (
        <>
          <Calendar
            markedDates={{
              ...markedDates,
              [selectedDate]: { ...markedDates[selectedDate], selected: true, selectedColor: '#81c784' },
            }}
            onDayPress={(day) => setSelectedDate(day.dateString)}
            theme={{
              calendarBackground: '#1e3d1e',
              dayTextColor: '#ffffff',
              monthTextColor: '#ffffff',
              arrowColor: '#6ddb6d',
              selectedDayBackgroundColor: '#6ddb6d',
              dotColor: '#6ddb6d',
            }}
          />
          <FlatList
            data={appointments.filter((appt) => appt.dateInstallation === selectedDate)}
            keyExtractor={(item) => item.id}
            renderItem={renderAppointment}
          />
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => setModalVisible(true)}
          >
            <Icon name="add" size={28} color="#fff" />
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.editButton}
            onPress={() => setModalVisible(true)}
          >
            <Icon name="edit" size={28} color="#fff" />
          </TouchableOpacity>
        </>
      )}

      <Modal visible={modalVisible} animationType="slide" transparent>
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Modifier/Ajouter un rendez-vous</Text>
          <TextInput
            placeholder="Nom"
            value={formData.nom}
            onChangeText={(text) => setFormData({ ...formData, nom: text })}
          />
          {/* Autres champs */}
          <TouchableOpacity onPress={handleSaveAppointment}>
            <Text>Sauvegarder</Text>
          </TouchableOpacity>
        </View>
      </Modal>
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1e3d1e',
  },
  selectedDate: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#ffffff',
    margin: 10,
    textAlign: 'center',
  },
  appointmentList: {
    padding: 10,
  },
  appointmentCard: {
    backgroundColor: '#2b5f2b',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
  },
  selectedCard: {
    borderColor: '#6ddb6d',
    borderWidth: 2,
  },
  appointmentText: {
    color: '#ffffff',
    fontSize: 14,
  },
  addButton: {
    position: 'absolute',
    bottom: 20,
    left: 20,
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#6ddb6d',
    justifyContent: 'center',
    alignItems: 'center',
  },
  editButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#ffb74d',
    justifyContent: 'center',
    alignItems: 'center',
  },
  swipeActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
    padding: 10,
  },
  actionButton: {
    backgroundColor: '#ff5252',
    padding: 10,
    borderRadius: 5,
    marginHorizontal: 5,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
  },
  modalContent: {
    width: '90%',
    padding: 20,
    backgroundColor: '#ffffff',
    borderRadius: 10,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#cccccc',
    borderRadius: 5,
    padding: 10,
    marginBottom: 15,
    backgroundColor: '#f9f9f9',
  },
  saveButton: {
    backgroundColor: '#6ddb6d',
    padding: 15,
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 10,
  },
  saveButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
    fontSize: 16,
  },
});


export default AppointmentCalendar;