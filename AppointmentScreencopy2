import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  ActivityIndicator,
  TextInput,
  TouchableOpacity,
  Modal,
  FlatList,
} from 'react-native';
import { Calendar } from 'react-native-calendars';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { Swipeable } from 'react-native-gesture-handler';
import axios from 'axios';
import moment from 'moment';

const AppointmentCalendar = () => {
  const [appointments, setAppointments] = useState([]);
  const [markedDates, setMarkedDates] = useState({});
  const [selectedDate, setSelectedDate] = useState(moment().format('YYYY-MM-DD'));
  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [modalVisible, setModalVisible] = useState(false);
  const [formData, setFormData] = useState({
    Name: '',
    LastName: '',
    adresse: '',
    telephone: '',
    email: '', // Ajout du champ email
    superficie: '', // Nouveau champ
    energie: '', // Nouveau champ
    quantite: '', // Nouveau champ
    Heure: '',
  });

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const response = await axios.get('https://www.greenconnectfrance.com/api/greenco');
        if (response.data && response.data.data && Array.isArray(response.data.data)) {
          const parsedData = parseAppointments(response.data.data);
          setAppointments(parsedData);
          mapAppointmentsToCalendar(parsedData);
        } else {
          Alert.alert('Erreur', 'Les données ne sont pas dans le format attendu.');
        }
      } catch (error) {
        console.error('Erreur lors du chargement des données :', error);
        Alert.alert('Erreur', "Impossible de charger les données. Vérifiez votre connexion.");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    mapAppointmentsToCalendar(appointments);
  }, [appointments]);

  const parseAppointments = (data) => {
    return data.map((item) => ({
      id: item.id.toString(),
      Name: item.Name || 'Inconnu',
      LastName: item.LastName || 'Inconnu',
      adresse: item.Adresse || 'Non spécifié',
      telephone: item.Telephone || 'N/A',
      email: item.Email || '', // Ajout du champ email
      superficie: item.Superficie || '', // Nouveau champ
      energie: item.Energie || '', // Nouveau champ
      quantite: item.Quantite || '', // Nouveau champ
      appointmentDate: moment(item.Date, 'YYYY-MM-DD').format('YYYY-MM-DD'),
      Heure: item.Heure || '00:00',
      status: item.status || 'En cours',
    }));
  };

  const mapAppointmentsToCalendar = (data) => {
    const marked = {};
    data.forEach((appointment) => {
      if (!marked[appointment.appointmentDate]) {
        marked[appointment.appointmentDate] = { marked: true, dotColor: '#6ddb6d' };
      }
    });
    setMarkedDates(marked);
  };

  const handleSaveAppointment = async () => {
    if (!formData.Name || !formData.LastName || !formData.adresse || !formData.Heure || !formData.email) {
      Alert.alert('Erreur', 'Tous les champs sont obligatoires.');
      return;
    }

    const newAppointment = {
      Name: formData.Name,
      LastName: formData.LastName,
      adresse: formData.adresse,
      telephone: formData.telephone,
      email: formData.email,
      superficie: formData.superficie, // Envoi de la superficie
      energie: formData.energie, // Envoi de l'énergie
      quantite: formData.quantite, // Envoi de la quantité
      Heure: formData.Heure,
      Date: selectedDate,
    };

    try {
      const response = await axios.post('https://www.greenconnectfrance.com/api/greenco', newAppointment);
      if (response.data) {
        const updatedAppointments = [...appointments, { ...newAppointment, id: response.data.id }];
        setAppointments(updatedAppointments);
        setModalVisible(false);
        resetFormData();
      }
    } catch (error) {
      console.error('Erreur lors de l\'ajout :', error);
      Alert.alert('Erreur', "Impossible d'ajouter le rendez-vous.");
    }
  };

  const handleUpdateAppointment = async () => {
    if (!formData.Name || !formData.LastName || !formData.adresse || !formData.Heure || !formData.email) {
      Alert.alert('Erreur', 'Tous les champs sont obligatoires.');
      return;
    }

    const updatedAppointment = {
      Name: formData.Name,
      LastName: formData.LastName,
      adresse: formData.adresse,
      telephone: formData.telephone,
      email: formData.email,
      superficie: formData.superficie, // Envoi de la superficie
      energie: formData.energie, // Envoi de l'énergie
      quantite: formData.quantite, // Envoi de la quantité
      Heure: formData.Heure,
      Date: selectedDate,
    };

    try {
      const response = await axios.patch(`https://www.greenconnectfrance.com/api/greenco/${selectedAppointmentId}`, updatedAppointment);
      if (response.data) {
        const updatedAppointments = appointments.map((appt) =>
          appt.id === selectedAppointmentId ? { ...updatedAppointment, id: selectedAppointmentId } : appt
        );
        setAppointments(updatedAppointments);
        setModalVisible(false);
        resetFormData();
      }
    } catch (error) {
      console.error('Erreur lors de la modification :', error);
      Alert.alert('Erreur', "Impossible de modifier le rendez-vous.");
    }
  };

  const handleStatusUpdate = async (id, newStatus) => {
    try {
      const response = await axios.patch(`https://www.greenconnectfrance.com/api/greenco/${id}`, {
        status: newStatus,
      });
  
      if (response.data) {
        const updatedAppointments = appointments.map((appt) =>
          appt.id === id ? { ...appt, status: newStatus } : appt
        );
        setAppointments(updatedAppointments);
      }
    } catch (error) {
      console.error('Erreur lors de la mise à jour du statut :', error.response.data);
      Alert.alert('Erreur', error.response?.data?.message || "Impossible de mettre à jour le statut.");
    }
  };
  
  const handleDeleteAppointment = (id) => {
    Alert.alert('Confirmation', 'Voulez-vous supprimer ce rendez-vous ?', [
      { text: 'Annuler', style: 'cancel' },
      {
        text: 'Supprimer',
        onPress: async () => {
          try {
            await axios.delete(`https://www.greenconnectfrance.com/api/greenco/${id}`);
            const updatedAppointments = appointments.filter((appt) => appt.id !== id);
            setAppointments(updatedAppointments);
          } catch (error) {
            console.error('Erreur lors de la suppression :', error);
            Alert.alert('Erreur', "Impossible de supprimer le rendez-vous.");
          }
        },
      },
    ]);
  };

  const resetFormData = () => {
    setFormData({
      Name: '',
      LastName: '',
      adresse: '',
      telephone: '',
      email: '', // Réinitialisation de l'email
      superficie: '', // Réinitialisation de la superficie
      energie: '', // Réinitialisation de l'énergie
      quantite: '', // Réinitialisation de la quantité
      Heure: '',
    });
    setSelectedAppointmentId(null);
  };

  const renderAppointment = ({ item }) => {
    const isSelected = item.id === selectedAppointmentId;

    const renderRightActions = (item) => (
      <View style={styles.swipeActions}>
        <TouchableOpacity onPress={() => handleDeleteAppointment(item.id)} style={styles.actionButton}>
          <Icon name="delete" size={24} color="#fff" />
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => {
            setFormData(item);
            setSelectedAppointmentId(item.id);
            setModalVisible(true);
          }}
          style={styles.actionButton}
        >
          <Icon name="edit" size={24} color="#fff" />
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => {
            const newStatus = item.status === 'En cours' ? 'Terminé' : 'En cours';
            handleStatusUpdate(item.id, newStatus);
          }}
          style={styles.actionButton}
        >
          <Icon name="check-circle" size={24} color="#fff" />
        </TouchableOpacity>
      </View>
    );

    return (
      <Swipeable renderRightActions={() => renderRightActions(item)}>
        <TouchableOpacity
          style={[styles.appointmentCard, isSelected && styles.selectedCard]}
          onPress={() => setSelectedAppointmentId(item.id)}
        >
          <Text style={styles.appointmentText}>{item.Name} {item.LastName}</Text>
          <Text style={styles.appointmentText}>{item.adresse}</Text>
          <Text style={styles.appointmentText}>Heure: {item.Heure}</Text>
          <Text style={styles.appointmentText}>Statut: {item.status}</Text>
        </TouchableOpacity>
      </Swipeable>
    );
  };

  return (
    <View style={styles.container}>
      <Calendar
        markedDates={markedDates}
        onDayPress={(day) => setSelectedDate(day.dateString)}
        theme={{ selectedDayBackgroundColor: '#00adf5', selectedDayTextColor: '#ffffff' }}
      />

      <FlatList
        data={appointments.filter((appt) => appt.appointmentDate === selectedDate)}
        renderItem={renderAppointment}
        keyExtractor={(item) => item.id}
      />

      <TouchableOpacity onPress={() => setModalVisible(true)} style={styles.addButton}>
        <Icon name="add" size={24} color="#fff" />
      </TouchableOpacity>

      {/* Modal pour ajouter ou modifier un rendez-vous */}
      <Modal visible={modalVisible} animationType="slide" transparent>
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>{selectedAppointmentId ? 'Modifier' : 'Ajouter'} un rendez-vous</Text>

            <TextInput
              placeholder="Prénom"
              value={formData.LastName}
              onChangeText={(text) => setFormData({ ...formData, LastName: text })}
              style={styles.textInput}
            />

            <TextInput
              placeholder="Nom"
              value={formData.Name}
              onChangeText={(text) => setFormData({ ...formData, Name: text })}
              style={styles.textInput}
            />

            <TextInput
              placeholder="Adresse"
              value={formData.adresse}
              onChangeText={(text) => setFormData({ ...formData, adresse: text })}
              style={styles.textInput}
            />

            <TextInput
              placeholder="Téléphone"
              value={formData.telephone}
              onChangeText={(text) => setFormData({ ...formData, telephone: text })}
              style={styles.textInput}
            />

            <TextInput
              placeholder="Email"
              value={formData.email} // Ajout de l'email
              onChangeText={(text) => setFormData({ ...formData, email: text })}
              style={styles.textInput}
            />

            <TextInput
              placeholder="Superficie"
              value={formData.superficie} // Nouveau champ
              onChangeText={(text) => setFormData({ ...formData, superficie: text })}
              style={styles.textInput}
            />

            <TextInput
              placeholder="Energie utilisée"
              value={formData.energie} // Nouveau champ
              onChangeText={(text) => setFormData({ ...formData, energie: text })}
              style={styles.textInput}
            />

            <TextInput
              placeholder="Quantité"
              value={formData.quantite} // Nouveau champ
              onChangeText={(text) => setFormData({ ...formData, quantite: text })}
              style={styles.textInput}
            />

            <TextInput
              placeholder="Heure"
              value={formData.Heure}
              onChangeText={(text) => setFormData({ ...formData, Heure: text })}
              style={styles.textInput}
            />

            <TouchableOpacity onPress={selectedAppointmentId ? handleUpdateAppointment : handleSaveAppointment} style={styles.button}>
              <Text style={styles.buttonText}>Sauvegarder</Text>
            </TouchableOpacity>

            <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.cancelButton}>
              <Text style={styles.cancelButtonText}>Annuler</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 10,
    width: '80%',
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  textInput: {
    height: 50,
    borderColor: '#ddd',
    borderWidth: 1,
    marginBottom: 10,
    paddingLeft: 10,
    borderRadius: 5,
  },
  addButton: {
    backgroundColor: '#00adf5',
    padding: 20,
    borderRadius: 50,
    position: 'absolute',
    bottom: 30,
    right: 30,
  },
  button: {
    backgroundColor: '#00adf5',
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
  },
  cancelButton: {
    padding: 10,
    borderRadius: 5,
    backgroundColor: '#ddd',
  },
  cancelButtonText: {
    textAlign: 'center',
    color: '#000',
  },
  buttonText: {
    textAlign: 'center',
    color: '#fff',
  },
  swipeActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
  actionButton: {
    backgroundColor: '#ff0000',
    justifyContent: 'center',
    alignItems: 'center',
    width: 60,
    height: 60,
  },
  appointmentCard: {
    backgroundColor: '#fff',
    padding: 15,
    marginBottom: 10,
    borderRadius: 5,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  selectedCard: {
    backgroundColor: '#e0f7fa',
  },
  appointmentText: {
    fontSize: 16,
    marginBottom: 5,
  },
});

export default AppointmentCalendar;
